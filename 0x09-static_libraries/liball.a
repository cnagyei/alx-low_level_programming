!<arch>
0-isupper.c/    0           0     0     644     160       `
#include "main.h"

/**
 * _isupper - checks for uppercase alphabets
 * @c: an integer
 * Return: 0
 */

int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}
0-memset.c/     0           0     0     644     319       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: memory area to be filled
 * @b: constant byte
 * @n: number of bytes
 * Return: the pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     804       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 *
 * @dest: string
 * @src: string
 *
 * Description: This function appends the `src` string to the `dest`
 * string, overwriting the terminating null byte (`\0`) at the end
 * of `dest`, and then adds a terminating null byte
 *
 * Return: Pointer to `dest`
 */
char *_strcat(char *dest, char *src)
{
	char *p = dest;
	int len_dest, len_src;

	/* determine length of dest */
	while (*p != '\0')
		p++;
	len_dest = p - dest;

	/* determine length of src */
	p = src;
	while (*p != '\0')
		p++;
	len_src = p - src;

	/* move dest to the null byte */
	while (*dest != '\0')
		dest++;

	/* copy src into dest */
	while ((*dest++ = *src++))
		;

	/* move dest back to first element */
	dest = (dest - (len_dest + len_src + 1));

	return (dest);
}
100-atoi.c/     0           0     0     644     391       `
#include "main.h"

/**
 *  _atoi - convert a string into an integer.
 *  @s: string to be converted
 *  Return: integer converted from the string
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}

1-isdigit.c/    0           0     0     644     160       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: an integer
 * Return: 0
 */

int _isdigit(int c)
{
	return (c >= 48 && c <= 57);
}
1-memcpy.c/     0           0     0     644     321       `
#include "main.h"

/**
 *  _memcpy - copies memory area.
 *  @src: memory area copied from
 *  @dest: memory are copied to
 *  @n: number of bytes
 *  Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     887       `
#include "main.h"

/**
 * _strlen - determines the length of a string
 * @str: string
 *
 * Return: length of string in bytes
 */
int _strlen(char *str)
{
	char *p = str;

	while (*p != '\0')
		p++;
	return (p - str);
}

/**
 * _strncat - concatenates two strings
 *
 * @dest: string
 * @src: string
 * @n: number of bytes from src
 *
 * Description: It will use at most n bytes from `src`
 * `src` doest not need to be null-terminated if it contains `n` or more bytes
 *
 * Return: Pointer to `dest`
 */
char *_strncat(char *dest, char *src, int n)
{
	int len_dest, i;

	/* determine length of dest */
	len_dest = _strlen(dest);

	/* move dest to the null byte */
	while (*dest != '\0')
		dest++;

	/* copy src into dest for n bytes */
	for (i = 0; i < n; i++)
	{
		*dest = *src;
		dest++;
		src++;
	}

	/* move dest back to first element */
	dest -= (len_dest + n);

	return (dest);
}

2-strchr.c/     0           0     0     644     422       `
#include "main.h"
#include <stdio.h>

/**
 *  _strchr - locate a character in a string
 *  @s: string to check
 *  @c: character to locate
 *  Return: a pointer to the first occurrence of the character c
 *  in the string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	int a;

	while (1)
	{

		a = *s++;
		if (a == c)
		{
			return (s - 1);
		}
		if (a == 0)
		{
			return (NULL);
		}
	}
}
2-strlen.c/     0           0     0     644     256       `
#include "main.h"

/**
 * _strlen - Returns the length of a string.
 *
 * @s: Pointer to the variable holding the string.
 *
 * Return: Length of string as int.
 */
int _strlen(char *s)
{
	int len = 0;

	for ( ; *s != '\0'; s++)
		len++;

	return (len);
}
2-strncpy.c/    0           0     0     644     707       `
#include "main.h"

/**
 * _strlen - determines the length of a string
 * @str: string
 *
 * Return: length of string in bytes
 */
int _strlen(char *str)
{
	char *p = str;

	while (*p != '\0')
		p++;
	return (p - str);
}

/**
 * _strncpy - copy a string
 * @dest: destination string
 * @src: string to copy
 * @n: bytes to copy
 *
 * Return: pointer to resulting string `dest`
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i, len_src;

	len_src = _strlen(src);

	/* copy src into dest for n bytes */
	if (len_src < n)
	{
		while ((*dest++ = *src++))
			;
		dest -= (len_src + 1);
	}
	else
	{
		for (i = 0; i < n; i++)
		{
			*dest = *src;
			dest++;
			src++;
		}
		dest -= n;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     170       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 * @c: any value of type int
 * Return: 0
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     237       `
#include "main.h"

/**
 * _puts - Prints a string, followed by a new line, to stdout
 *
 * @str: The string to be printed
 *
 * Return: Void.
 */
void _puts(char *str)
{
	for ( ; *str != '\0'; str++)
		_putchar(*str);
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _strcmp - compare two strings
 * @s1: first string
 * @s2: second string
 *
 * Return: <0 if s1 < s2, 0 if s1 = s2, >0 if s1 > s2
 */
int _strcmp(char *s1, char *s2)
{
	for ( ; (*s1 == *s2); s1++, s2++)
		if (*s1 == '\0')	/* s1 reaches end and equals to s2*/
			return (0);
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     537       `
#include "main.h"

/**
 * _strspn - gets the length of a preix substring
 * @s: string to evaluate
 * @accept: string containing the list of characters to match in s
 * Return:  the number of bytes in the initial segment of
 * s which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0;
	int j;


	while (*s)
	{
		for (j = 0; accept[j]; j++)
		{
			if (accept[j] == *s)
			{
				i++;
				break;
			}

			else if ((accept[j + 1]) == '\0')
				return (i);
		}
		s++;
	}

	return (i);
}

4-isalpha.c/    0           0     0     644     199       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: any value of type int
 * Return: 0
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     458       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to be searched
 * @accept: string containing the bytes
 * Return: a pointer to the byte in s that matches one of
 * the bytes in accept, or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (accept[i] == *s)
				return (s);
		}
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     569       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - locates a substring
 * @haystack: string to search in
 * @needle: substring to be located
 * Return: a pointer to the beginning of the located
 * substring, or NULL if the substring is not found.
 */
char  *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == 0)
		return (haystack);
	while (*haystack)
	{
		i = 0;

		if (haystack[i] == needle[i])
		{
			do {
				if (needle[i + 1] == '\0')
					return (haystack);
				i++;
			} while (haystack[i] == needle[i]);
		}
		haystack++;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     268       `
#include "main.h"

/**
 *_abs - prints the absolute value of an integer
 * @n : any value of type int
 * Return: Always 0
 */
int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n == 0)
	{
		return (n);

	}
	else if (n < 0)
	{
		return (-n);
	}
	return (0);
}
9-strcpy.c/     0           0     0     644     440       `
#include "main.h"

/**
 * _strcpy - copy string pointed to by src, including the
 * terminating null byte (\0), to the buffer pointed to by `dest`.
 *
 * @dest: pointer to buffer.
 * @src: pointer to string to be copied.
 *
 * Return: pointer to `dest`.
 */

char *_strcpy(char *dest, char *src)
{
	int len;
	char *p = src;

	while (*p != '\0')
		p++;
	len = p - src;

	while ((*dest++ = *src++))
		;
	dest -= (len + 1);

	return (dest);
}
main.c/         0           0     0     644     157       `
#include <stdio.h>

int _strlen(char *s);

int main(void)
{
	char a[6] = "Hello";
	int len;

	len = _strlen(a);

	printf("Length of string is %d\n", len);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

